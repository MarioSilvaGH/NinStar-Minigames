<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Definições iniciais
image_speed = 0;
image_index = 0;

//Modificadores
my_gravity = 0.3;
my_acceleration = 0.15;

//Estados
state_jump = 0;
state_acc = 0;

//Colisão
collision_top = noone;
collision_bottom = noone;
collision_left = noone;
collision_right = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animações

//Jump
if(state_jump &gt; 0){

    //Estático
    sprite_index = spr_mario;
    image_speed = 0;
    
    if(vspeed &gt; 0)
        image_index = 4; //Caindo
    else
        image_index = 3; //Subindo
        
};
else{

    //Idle
    if(hspeed = 0){
    
        //Estático
        sprite_index = spr_mario;
        image_speed = 0;
        image_index = 0;
    };
    else{
    
        //Walk
        if(keyboard_check(vk_left))
        ||(keyboard_check(vk_right)){
        
            //Animado
            sprite_index = spr_mario_walk;
            image_speed = 0.26;
        };
        //Slide
        else{
        
            //Estático
            sprite_index = spr_mario;
            image_speed = 0;
            image_index = 2;
        };
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimentos

//Limite de velocidade de queda (Gravidade)
if!(collision_bottom){

    if(vspeed &lt; 4.3)
        vspeed += my_gravity;
    else
        vspeed = 6.3;
};

//SE não estiver saltando...
if(state_jump == 0)
&amp;&amp;(collision_bottom){

    //Regular Jump
    if(keyboard_check_pressed(vk_shift)){
    
        vspeed = -6;
        state_jump = 1;
    };
};
else{ 

    //Quando cair no chão... Finalizar salto
    if(collision_bottom)
        state_jump = 0;
};

//Esquerda, Direita (Aceleração)
if(keyboard_check(vk_left)){

    //Se não tiver uma parede á esquerda...
    if(!collision_left)
        state_acc -= my_acceleration;
    else
        state_acc = 0;
};
else if(keyboard_check(vk_right)){

    //Se não tiver uma parede á direita...
    if(!collision_right)
        state_acc += my_acceleration;
    else
        state_acc = 0;
};
else{

    //Decrementar aceleração ao parar
    if(state_acc &lt; 0) state_acc += my_acceleration;
    if(state_acc &gt; 0) state_acc -= my_acceleration;
};

//Limitar aceleração máxima
state_acc = clamp(state_acc,-my_acceleration*16,my_acceleration*16);
hspeed = state_acc;

//&lt; DEBUG &gt;
if(global.debug == 1){

    //Esquerda, Direita (Alternativas)
    if(keyboard_check(ord("Q")))
        hspeed = -3.14;
    else if(keyboard_check_released(ord("Q")))
        hspeed = 0; 
    
    if(keyboard_check(ord("E")))
        hspeed = 3.14;
    else if(keyboard_check_released(ord("E")))
        hspeed = 0;
        
    if(keyboard_check(ord("A")))
        hspeed = -1;
    else if(keyboard_check_released(ord("A")))
        hspeed = 0;   
        
    if(keyboard_check(ord("D")))
        hspeed = 1;
    else if(keyboard_check_released(ord("D")))
        hspeed = 0;
};
        
//Lado do sprite
if(hspeed &gt; 0)
     image_xscale = 1;
if(hspeed &lt; 0)
    image_xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resetar posição
if(bbox_top &gt; room_height+16){

    hspeed = 0;
    vspeed = 0;
    x = xstart;
    y = ystart;
};

//Crush
if((instance_exists(collision_top))&amp;&amp;(instance_exists(collision_bottom))
&amp;&amp;((collision_top.bbox_bottom &gt;= bbox_top)||(collision_bottom.bbox_top &lt;= bbox_bottom)))
||((instance_exists(collision_left))&amp;&amp;(instance_exists(collision_right))
&amp;&amp;((collision_left.bbox_right &gt;= bbox_left)||(collision_right.bbox_left &lt;= bbox_right))){

    instance_create(x,y,obj_death); 
    hspeed = 0;
    vspeed = 0;
    x = xstart;
    y = ystart;
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colisões

//TOP (Teto) [-]
collision_top = collision_line(bbox_left,(bbox_top+vspeed)-1,bbox_right,(bbox_top+vspeed)-1,obj_solid,0,0);
if(collision_top){
    
    //Parar qualquer movimento para cima
    if(vspeed &lt; 0)
        vspeed = 0;
    
    //Caso já esteja dentro da colisão... Mover para fora
    while(collision_line(bbox_left,(bbox_top-1),bbox_right,(bbox_top-1),obj_solid,0,0))
        y++;
                    
    //Antes de colidir... Mover até colisão
    while(!collision_line(bbox_left,(bbox_top-1),bbox_right,(bbox_top-1),obj_solid,0,0))
        y--;
    
    //Se a colisão estiver em movimento contra player...
    if(collision_top.vspeed &gt; 0)
        vspeed = collision_top.vspeed;
    else
        y = round(y);
};

//BOTTOM (Chão) [+]
collision_bottom = collision_line(bbox_left,(bbox_bottom+vspeed)+1,bbox_right,(bbox_bottom+vspeed)+1,obj_semisolid,0,0);
if(collision_bottom){

    //Se NÃO for solido E estiver indo pra cima (ou seja, se estiver passando por um semi-solido)
    if!((collision_bottom.object_index != obj_solid)&amp;&amp;(vspeed &lt; 0)){
        
        //Parar qualquer movimento para baixo
        if(vspeed &gt; 0)
            vspeed = 0;
                
        //Caso já esteja dentro da colisão... Mover para fora
        while(collision_line(bbox_left,(bbox_bottom+1),bbox_right,(bbox_bottom+1),obj_semisolid,0,0))
            y--;

        //Antes de colidir... Mover até colisão
        while(!collision_line(bbox_left,(bbox_bottom+1),bbox_right,(bbox_bottom+1),obj_semisolid,0,0))
            y++;
            
        //Se a colisão estiver em movimento contra player...
        if(collision_bottom.vspeed &lt; 0)
            vspeed = collision_bottom.vspeed;
        
        //Mas se estiver indo em direção oposta... Sincronizar grávidade
        else if(collision_bottom.vspeed &gt; 0)
            vspeed = collision_bottom.vspeed;
        else
            y = round(y);
    };
    else
        collision_bottom = noone;
};

//LEFT (Parede) [-]
collision_left =  collision_line((bbox_left+hspeed)-1,bbox_top,(bbox_left+hspeed)-1,bbox_bottom,obj_solid,0,0);
if(collision_left){
         
    //Parar qualquer movimento para esquerda
    if(hspeed &lt; 0)
        hspeed = 0;

    //Caso já esteja dentro da colisão... Mover para fora
    while(collision_line((bbox_left-1),bbox_top,(bbox_left-1),bbox_bottom,obj_solid,0,0))
        x++;
            
    //Antes de colidir... Mover até colisão
    while(!collision_line((bbox_left-1),bbox_top,(bbox_left-1),bbox_bottom,obj_solid,0,0))
        x--;
    
    //Se a colisão estiver em movimento contra player...
    if(collision_left.hspeed &gt; 0)
        hspeed = collision_left.hspeed;
    else
        x = round(x);
};

//RIGHT (Parede) [+]
collision_right = collision_line((bbox_right+hspeed)+1,bbox_top,(bbox_right+hspeed)+1,bbox_bottom,obj_solid,0,0);
if(collision_right){

    //Parar qualquer movimento para direita
    if(hspeed &gt; 0)
        hspeed = 0;

    //Caso já esteja dentro da colisão... Mover para fora
    while(collision_line((bbox_right+1),bbox_top,(bbox_right+1),bbox_bottom,obj_solid,0,0))
        x--;
                
    //Antes de colidir... Mover até colisão
    while(!collision_line((bbox_right+1),bbox_top,(bbox_right+1),bbox_bottom,obj_solid,0,0))
        x++;
    
    //Se a colisão estiver em movimento contra player...
    if(collision_right.hspeed &lt; 0)
        hspeed = collision_right.hspeed;
    else
        x = round(x);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite

//Player
draw_self();

//&lt; DEBUG &gt;
if(global.debug == 1){
    
    //Origin
    draw_set_alpha(0.5);
    draw_set_color(c_yellow);
    draw_line(x,0,x,999); //H
    draw_line(0,y,999,y); //V
    
    //Bounding Box
    draw_set_alpha(0.4);
    draw_set_color(c_red);
    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,0);
    
    //Colisão Estimada
    draw_set_alpha(0.5);
    draw_set_color(c_lime);
    draw_line(bbox_left,(bbox_top+vspeed)-1,bbox_right,(bbox_top+vspeed)-1);
    draw_line(bbox_left,(bbox_bottom+vspeed)+1,bbox_right,(bbox_bottom+vspeed)+1);
    draw_line((bbox_left+hspeed)-1,bbox_top,(bbox_left+hspeed)-1,bbox_bottom);
    draw_line((bbox_right+hspeed)+1,bbox_top,(bbox_right+hspeed)+1,bbox_bottom);
    
    //Informações
    draw_set_alpha(0.9);
    draw_set_color(c_white);
    draw_set_font(global.font);
    draw_text(0,7*0,"X: "+string(x)+" ~ P.X:"+string(xprevious));
    draw_text(0,7*1,"Y: "+string(y)+" ~ P.Y:"+string(yprevious));
    draw_text(0,7*2,"HSPEED: "+string(hspeed));
    draw_text(0,7*3,"VSPEED: "+string(vspeed));
    draw_text(0,7*4,"------------------");
    draw_text(0,7*5,"GRAVITY: "+string(my_gravity));
    draw_text(0,7*6,"ACL: "+string(state_acc)+" / "+string(my_acceleration));
    draw_text(0,7*7,"JUMP: "+string(state_jump));
    draw_text(0,7*8,"------------------");
    draw_text(0,7*9,"cls_top :"+string(collision_top));
    draw_text(0,7*10,"cls_bottom :"+string(collision_bottom));
    draw_text(0,7*11,"cls_left :"+string(collision_left));
    draw_text(0,7*12,"cls_right :"+string(collision_right));
    draw_text(0,7*13,"------------------");
    draw_text(0,7*14,"bbox_top :"+string(bbox_top));
    draw_text(0,7*15,"bbox_bottom :"+string(bbox_bottom));
    draw_text(0,7*16,"bbox_left :"+string(bbox_left));
    draw_text(0,7*17,"bbox_right :"+string(bbox_right));
    draw_text(0,7*18,"------------------");
    if(collision_top) draw_text(0,7*19,"ctop_box :"+string(collision_top.bbox_bottom));
    if(collision_bottom) draw_text(0,7*20,"cbottom_box :"+string(collision_bottom.bbox_top));
    if(collision_left) draw_text(0,7*21,"cleft_box :"+string(collision_left.bbox_right));
    if(collision_right) draw_text(0,7*22,"cright_box :"+string(collision_right.bbox_left));
    draw_set_color(c_white);
    draw_set_alpha(1);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
